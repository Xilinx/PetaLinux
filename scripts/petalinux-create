#!/usr/bin/env python3

# Copyright (C) 2021-2022, Xilinx, Inc.  All rights reserved.
# Copyright (C) 2022-2024, Advanced Micro Devices, Inc.  All rights reserved.
#
# Author:
#       Raju Kumar Pothuraju <rajukumar.pothuraju>
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os
import sys

scripts_path = os.path.dirname(os.path.realpath(__file__))
libs_path = os.path.join(scripts_path, 'libs')
sys.path = sys.path + [libs_path]
import bitbake_utils
import create_component
import examples
import logger_setup
import plnx_utils
import plnx_vars

logger, console_h = logger_setup.setup_logger('PetaLinux')


def PreProcessArgs():
    # Shell used to support -t/--type project/apps/modules
    # To support those adding preprocessor for args
    # which will read the args and find any deprecated args
    # and rearrange them as per the python argparser
    DeprecatedArgs = ('-t', '--type')
    parser_value = ''
    for arg in DeprecatedArgs:
        if arg in sys.argv:
            parser_value = sys.argv[sys.argv.index(arg) + 1]
            logger.note('Argument: "%s %s" has been deprecated. '
                        'It is recommended to start using new python command line Argument.'
                        % (sys.argv[sys.argv.index(arg)], sys.argv[sys.argv.index(arg) + 1]))
            logger.note('Use: %s %s [OPTIONS]' % (os.path.basename(sys.argv[0]),
                                                  sys.argv[sys.argv.index(arg) + 1]))
            del sys.argv[sys.argv.index(arg) + 1]
            del sys.argv[sys.argv.index(arg)]
    if parser_value:
        sys.argv.insert(1, parser_value)


def main():
    PreProcessArgs()
    parser = argparse.ArgumentParser(
        description='This creates a new PetaLinux Project or component ',
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False,
        epilog='Use %(prog)s <subcommand> --help to get help on a specific command')

    # Global args
    parser.add_argument('-f', '--force', action='store_true',
                        help='Force overwriting an existing component directory')
    parser.add_argument('-D', '--debug', action='store_true',
                        help='Display the Debug prints')
    parser.add_argument('--out', default=os.getcwd(), type=os.path.realpath,
                        help=argparse.SUPPRESS)
    parser.add_argument('-n', '--name', default='',
                        help='Specify a name for the component or project.'
                        '\nIt is OPTIONAL to create a PROJECT when you specify a'
                        ' source BSP to create a project')
    global_args, unparsed_args = parser.parse_known_args()

    parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,
                        help='Show this help message and exit')
    subparsers = parser.add_subparsers(dest="command",
                                       title='subcommands', metavar='<subcommand>')
    subparsers.required = True

    # Project parser args
    project_parser = subparsers.add_parser('project', help='Create PetaLinux project',
                                           usage='Use %(prog)s {[-s SOURCE] [--template {versal,zynqMP,zynq,microblaze}] '
                                                  '[--tmpdir TMPDIR] [--name NAME]}',
                                           epilog=examples.PCreateProject,
                                           formatter_class=argparse.RawTextHelpFormatter)
    project_parser.add_argument('-s', '--source', type=os.path.realpath,
                                help='Specify a PetaLinux BSP as a project source')
    project_parser.add_argument('--template', default='',
                                help='Specify the template name to use.',
                                choices=['versal', 'zynqMP', 'zynq', 'microblaze'])
    project_parser.add_argument('--tmpdir',
                                help='Specify the local drive path as TMPDIR location when creating project.'
                                '\nDefault TMPDIR cannot be under NFS. By default.'
                                '\nPetaLinux sets the TMPDIR under /tmp when project is on NFS.'
                                '\nYou can set your own local drive as TMPDIR PATH using --tmpdir option.')
    project_parser.set_defaults(func=create_component.CreateComponent)

    # Apps parser args
    apps_parser = subparsers.add_parser('apps', help='Create User applications',
                                        epilog=examples.PcreateApps,
                                        formatter_class=argparse.RawTextHelpFormatter)
    apps_parser.add_argument('--static-pn', metavar='',
                             help='Specify the package name created with '
                             'dfx_dtg_zynqmp_static or dfx_dtg_versal_static'
                             '\nto use with in dfx_dtg_zynqmp_partial or dfx_dtg_versal_partial.'
                             '\nNote: This supports only for versal and zynqmp.')
    apps_parser.add_argument('--template', metavar='', default='c', type=str,
                             choices=['c', 'c++', 'autoconf', 'install'] +
                             list(plnx_vars.DFX_Templates.keys()),
                             help='Specify the template name to create apps'
                             '\nc                      : c user application(default)'
                             '\nc++                    : c++ user application'
                             '\nautoconf               : autoconf user application'
                             '\ninstall                : install data only'
                             '\n%s' % "\n".join(
                                 ['{0}{1}: {2}'.format(k, ' ' * (23 - len(k)),
                                                          v.replace('\n', '\n' + ' ' * 25))
                                  for k, v in plnx_vars.DFX_Templates.items()])
                             )
    apps_parser.add_argument('--srcuri', nargs='*', action='append',
                             help='This option is to specify the source files'
                             '\nfrom outside project.This will copy specified'
                             '\nfiles into recipe files directory and add to'
                             '\nSRC_URI variable in .bb file. Specify the multiple files with space.'
                             )
    apps_parser.add_argument('--enable', action='store_true',
                             help='Enable the Application')
    apps_parser.add_argument('-p', '--project', metavar='PROJECT_DIR', type=os.path.realpath,
                             help='Specify full path to a PetaLinux project.'
                             '\nDefault is the working project.')
    apps_parser.set_defaults(func=create_component.CreateComponent)

    # Modules parser args
    modules_parser = subparsers.add_parser('modules', help='Create Linux user module',
                                           epilog=examples.PCreateModules,
                                           formatter_class=argparse.RawTextHelpFormatter)
    modules_parser.add_argument('--srcuri', nargs='*', action='append',
                                help='This option is to specify the source files'
                                '\nfrom outside project.This will copy specified'
                                '\nfiles into recipe files directory and add to'
                                '\nSRC_URI variable in .bb file. Specify the multiple files with space.'
                                )
    modules_parser.add_argument('--enable', action='store_true',
                                help='Enable the Module')
    modules_parser.add_argument('-p', '--project', metavar='PROJECT_DIR', type=os.path.realpath,
                                help='Specify full path to a PetaLinux project.'
                                '\nDefault is the working project.')
    modules_parser.set_defaults(func=create_component.CreateComponent)

    # Display help if no args specified
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args(unparsed_args, namespace=global_args)

    # Print debug prints if debug selected
    if args.debug:
        console_h.setLevel(logging.DEBUG)
        plnx_vars.EnablePlnxTraceback = True
    # static_pn name should be specified for dfx_dtg_zynqmp_partial
    # or dfx_dtg_versal_partial
    if args.command == 'apps' and not args.static_pn and \
            args.template in ['dfx_dtg_zynqmp_partial', 'dfx_dtg_versal_partial']:
        logger.error('Creating "%s" template app requires '
                     '--static-pn <STATIC_PACKAGE_NAME> to be defined' % (args.template))
        sys.exit(255)

    # DFx-Template apps required srcuri to be specified or use force
    if args.command == 'apps' and not args.srcuri and \
            args.template in plnx_vars.DFX_Templates.keys():
        if not args.force:
            logger.error('Creating "%s" template app requires '
                         '--srcuri to be specified or use --force to '
                         'skip adding SRCURI' % (args.template))
            sys.exit(255)
        else:
            logger.warning(
                'Creating "%s" template app without SRCURI variable' % (args.template))

    proot = ''
    args.local_srcuris = ''
    args.network_srcuris = ''
    if args.command in ['apps', 'modules']:
        # For apps or modules, name should be specified
        if not args.name:
            logger.error('Component name is not specified!')
            sys.exit(255)
        # Check apps or modules name to not have special chars
        reason = bitbake_utils.validate_pn(args.name)
        if reason:
            logger.error(reason)
            sys.exit(255)

        # Exit if PROOT is not PetaLinux project
        proot = plnx_utils.exit_not_plnx_project(args.project)

        # Exit if PetaLinux version mismatch
        if not plnx_utils.petalinux_version_check(proot):
            sys.exit(255)

        # Validate SRCURI given by users
        if args.srcuri:
            # Convert nested list to list elements [[file files1] [file3] to
            # [file files1 file3]
            args.srcuri = [item for args in args.srcuri for item in args]
            args.local_srcuris, args.network_srcuris = bitbake_utils.validate_srcuri(
                args.srcuri)
    else:
        # Give error if source not found
        if args.source and not os.path.exists(args.source):
            logger.error('BSP file "%s" doesnot exists' % args.source)
            sys.exit(255)

    logger.info('Create %s: %s' % (args.command, args.name))
    ret = args.func(args, proot)
    return ret


if __name__ == "__main__":
    try:
        ret = main()
    except Exception as e:
        ret = 1
        plnx_utils.PlnxTraceback(e)
    sys.exit(ret)
